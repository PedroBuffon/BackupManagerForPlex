# Plex Backup Manager - CI/CD Pipeline
# This workflow builds and tests the Plex Backup Manager Windows Forms application
# Built on .NET 9.0 with Windows Forms support

name: Plex Backup Manager Build

env:
  RELEASE_VERSION: "v1.0.2"

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

permissions:
  contents: write

jobs:
  build:
    name: Build and Test
    runs-on: windows-latest

    steps:
    - name: 'üìÑ Checkout'
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # Install .NET 9.0
    - name: 'üîß Setup .NET'
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 9.0.x

    # Restore dependencies
    - name: 'üì¶ Restore dependencies'
      run: dotnet restore PlexBackup.sln

    # Build the application
    - name: 'üî® Build'
      run: dotnet build PlexBackup.sln --configuration Release --no-restore

    # Test the application (if tests exist)
    - name: 'üß™ Test'
      run: dotnet test PlexBackup.sln --configuration Release --no-build --verbosity normal
      continue-on-error: true

  release:
    name: Create Release
    needs: build
    runs-on: windows-latest
    permissions:
      contents: write

    steps:
    - name: 'üìÑ Checkout'
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 'üîç Fetch all tags'
      run: git fetch --tags

    - name: 'üîç Debug Info'
      run: |
        echo "Event: ${{ github.event_name }}"
        echo "Ref: ${{ github.ref }}"
        echo "Ref Name: ${{ github.ref_name }}"
        echo "Release Version: ${{ env.RELEASE_VERSION }}"

    - name: 'üîç Check if tag exists'
      id: check_tag
      run: |
        $tagExists = git tag -l "${{ env.RELEASE_VERSION }}"
        if ($tagExists) {
          echo "tag_exists=true" >> $env:GITHUB_OUTPUT
          Write-Host "Tag ${{ env.RELEASE_VERSION }} already exists locally"
        } else {
          # Check if tag exists on remote
          $remoteTag = git ls-remote --tags origin "${{ env.RELEASE_VERSION }}"
          if ($remoteTag) {
            echo "tag_exists=true" >> $env:GITHUB_OUTPUT
            Write-Host "Tag ${{ env.RELEASE_VERSION }} already exists on remote"
          } else {
            echo "tag_exists=false" >> $env:GITHUB_OUTPUT
            Write-Host "Tag ${{ env.RELEASE_VERSION }} does not exist"
          }
        }

    - name: 'üîç Check if release exists'
      id: check_release
      if: steps.check_tag.outputs.tag_exists == 'false'
      run: |
        try {
          $release = gh release view "${{ env.RELEASE_VERSION }}" --json id 2>$null
          if ($release) {
            echo "release_exists=true" >> $env:GITHUB_OUTPUT
            Write-Host "Release ${{ env.RELEASE_VERSION }} already exists"
          } else {
            echo "release_exists=false" >> $env:GITHUB_OUTPUT
            Write-Host "Release ${{ env.RELEASE_VERSION }} does not exist"
          }
        } catch {
          echo "release_exists=false" >> $env:GITHUB_OUTPUT
          Write-Host "Release ${{ env.RELEASE_VERSION }} does not exist"
        }
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: 'üè∑Ô∏è Create and Push Tag'
      if: steps.check_tag.outputs.tag_exists == 'false'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git tag -a "${{ env.RELEASE_VERSION }}" -m "Release ${{ env.RELEASE_VERSION }}"
        git push origin "${{ env.RELEASE_VERSION }}"

    - name: 'üîß Setup .NET'
      if: steps.check_tag.outputs.tag_exists == 'false'
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 9.0.x

    - name: 'üì¶ Package windows x64'
      if: steps.check_tag.outputs.tag_exists == 'false'
      run: |
        dotnet publish PlexBackup.csproj -r win-x64 -c Release -o bin/win-x64 --self-contained false
        Copy-Item "config.json.example" "bin/win-x64/" -ErrorAction SilentlyContinue
        Copy-Item "README.md" "bin/win-x64/" -ErrorAction SilentlyContinue
        Copy-Item "ROLLBACK.md" "bin/win-x64/" -ErrorAction SilentlyContinue
        Compress-Archive -Path "bin/win-x64/*" -DestinationPath "PlexBackup-win-x64.zip"

    - name: 'üì¶ Package windows x86'
      if: steps.check_tag.outputs.tag_exists == 'false'
      run: |
        dotnet publish PlexBackup.csproj -r win-x86 -c Release -o bin/win-x86 --self-contained false
        Copy-Item "config.json.example" "bin/win-x86/" -ErrorAction SilentlyContinue
        Copy-Item "README.md" "bin/win-x86/" -ErrorAction SilentlyContinue
        Copy-Item "ROLLBACK.md" "bin/win-x86/" -ErrorAction SilentlyContinue
        Compress-Archive -Path "bin/win-x86/*" -DestinationPath "PlexBackup-win-x86.zip"

    - name: 'üì¶ Package windows arm64'
      if: steps.check_tag.outputs.tag_exists == 'false'
      run: |
        dotnet publish PlexBackup.csproj -r win-arm64 -c Release -o bin/win-arm64 --self-contained false
        Copy-Item "config.json.example" "bin/win-arm64/" -ErrorAction SilentlyContinue
        Copy-Item "README.md" "bin/win-arm64/" -ErrorAction SilentlyContinue
        Copy-Item "ROLLBACK.md" "bin/win-arm64/" -ErrorAction SilentlyContinue
        Compress-Archive -Path "bin/win-arm64/*" -DestinationPath "PlexBackup-win-arm64.zip"

    - name: 'üöÄ Create Release'
      if: steps.check_tag.outputs.tag_exists == 'false' && (steps.check_release.outputs.release_exists == 'false' || steps.check_release.conclusion == 'skipped')
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.RELEASE_VERSION }}
        name: ${{ env.RELEASE_VERSION }}
        body: |
          
          ### üÜï New Features:
          - **Enhanced Interface**: Reorganized settings window with improved organization
          - **Comprehensive Logging**: Advanced log viewer with syntax highlighting and copy functionality
          - **Performance Optimization**: Improved restore speed with robocopy multi-threading (8 threads)
          - **Smart Restore**: Dynamic progress calculation and timeout management (15 minutes)
          - **Native Windows Theme**: Consistent system-native styling across all windows
          - **Rollback System**: Automatic rollback when backup fails with configurable retry attempts
          - **System Tray Integration**: Complete minimize to system tray functionality
          - **JSON Configuration**: Modern configuration format with automatic migration
          
          ### üîß Major Improvements:
          - **Simplified Main Interface**: Moved backup options to organized settings window
          - **Enhanced Restore Experience**: Custom completion dialogs with detailed log access
          - **Better Error Handling**: Comprehensive error reporting and recovery
          - **Settings Organization**: Clear categorization of backup, interface, rollback, and logging options
          - **Removed Duplications**: Eliminated redundant interface elements for cleaner UX
          - **File Management**: Robust file and registry backup processes with validation
          - **Automatic Cleanup**: Smart retention policies for managing old backups
          
          ### üé® Interface Updates:
          - **Clean Main Window**: Focused on essential actions (Backup, Schedule, Manage, Settings)
          - **Organized Settings**: Grouped by Backup Options, Interface Settings, Rollback Settings, and Logging
          - **Professional Styling**: Windows native theme for better system integration
          - **Accessibility**: Proper color contrast and system font support
          
          ### üì¶ Available Packages:
          - **win-x64**: For 64-bit Windows systems (Recommended)
          - **win-x86**: For 32-bit Windows systems  
          - **win-arm64**: For ARM64 Windows systems
          
          ### üìã Installation:
          1. Download the appropriate ZIP file for your system architecture
          2. Extract to your desired location
          3. Run `PlexBackup.exe`
          4. Configure your backup settings via the Settings button
          5. Set your backup path and preferences
          
          ### ‚öôÔ∏è System Requirements:
          - Windows 10/11 or Windows Server 2019+
          - .NET 9.0 Runtime (will be prompted to install if missing)
          - Plex Media Server installed
          
          ### üÜò Support:
          - Check `README.md` for basic usage instructions
          - Check `ROLLBACK.md` for rollback feature documentation
          - Report issues on GitHub with detailed logs
        files: |
          PlexBackup-win-x64.zip
          PlexBackup-win-x86.zip
          PlexBackup-win-arm64.zip
        draft: false
        prerelease: false
